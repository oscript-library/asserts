&Тест
Процедура ТестДолжен_Проверить_ИдентичностьСтроки() Экспорт
	// Arrange
	ОжидаемоеЗначение = "Привет, мир!";
	ФактическоеЗначение = "Привет, мир!";
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).Идентично(ОжидаемоеЗначение);
КонецПроцедуры

&Тест
Процедура ТестДолжен_Проверить_НеИдентичностьСтроки() Экспорт
	// Arrange
	ОжидаемоеЗначение = "Привет, мир!";
	ФактическоеЗначение = "Привет, Вася!";
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).Не_().Идентично(ОжидаемоеЗначение);
КонецПроцедуры

&Тест
Процедура ТестДолжен_Проверить_ИдентичностьЧисел() Экспорт
	// Arrange
	ОжидаемоеЗначение = 42;
	ФактическоеЗначение = 42;
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).Идентично(ОжидаемоеЗначение);
КонецПроцедуры

&Тест
Процедура ТестДолжен_Проверить_ИдентичностьБулевыхЗначений() Экспорт
	// Act & Assert
	Ожидаем.Что(Истина).Идентично(Истина);
	Ожидаем.Что(Ложь).Идентично(Ложь);
КонецПроцедуры

&Тест
Процедура ТестДолжен_Проверить_ИдентичностьДат() Экспорт
	// Arrange
	ОжидаемоеЗначение = Дата("20250709120000");
	ФактическоеЗначение = Дата("20250709120000");
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).Идентично(ОжидаемоеЗначение);
КонецПроцедуры

&Тест
Процедура ТестДолжен_Проверить_ИдентичностьНеопределено() Экспорт
	// Arrange
	ОжидаемоеЗначение = Неопределено;
	ФактическоеЗначение = Неопределено;
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).Идентично(ОжидаемоеЗначение);
КонецПроцедуры

&Тест
Процедура ТестДолжен_Выбросить_Исключение_При_Разных_Типах() Экспорт
	// Arrange
	ПроверяемоеЗначение = "123";
	ОжидаемоеЗначение = 123;
	
	// Act & Assert
	Попытка
		Ожидаем.Что(ПроверяемоеЗначение).Идентично(ОжидаемоеЗначение);
	Исключение
		// Ожидаемое поведение - исключение должно быть выброшено при сравнении разных типов
		Если СтрНайти(ИнформацияОбОшибке().Описание, "НЕ РАВЕН типу ожидаемого значения") > 0 Тогда
			Возврат;
		КонецЕсли;
	КонецПопытки;

	ВызватьИсключение "Ожидали, что будет выброшено исключение при сравнении разных типов, а это не так";
КонецПроцедуры

// Тесты для массивов

&Тест
Процедура ТестДолжен_Проверить_ИдентичностьПустыхМассивов() Экспорт
	// Arrange
	ОжидаемоеЗначение = Новый Массив;
	ФактическоеЗначение = Новый Массив;
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).Идентично(ОжидаемоеЗначение);
КонецПроцедуры

&Тест
Процедура ТестДолжен_Проверить_ИдентичностьМассивов() Экспорт
	// Arrange
	ОжидаемоеЗначение = Новый Массив;
	ОжидаемоеЗначение.Добавить("элемент1");
	ОжидаемоеЗначение.Добавить("элемент2");
	ОжидаемоеЗначение.Добавить(123);
	
	ФактическоеЗначение = Новый Массив;
	ФактическоеЗначение.Добавить("элемент1");
	ФактическоеЗначение.Добавить("элемент2");
	ФактическоеЗначение.Добавить(123);
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).Идентично(ОжидаемоеЗначение);
КонецПроцедуры

&Тест
Процедура ТестДолжен_Проверить_НеИдентичностьМассивовРазнойДлины() Экспорт
	// Arrange
	ОжидаемоеЗначение = Новый Массив;
	ОжидаемоеЗначение.Добавить("элемент1");
	
	ФактическоеЗначение = Новый Массив;
	ФактическоеЗначение.Добавить("элемент1");
	ФактическоеЗначение.Добавить("элемент2");
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).Не_().Идентично(ОжидаемоеЗначение);
КонецПроцедуры

&Тест
Процедура ТестДолжен_Проверить_НеИдентичностьМассивовСРазнымиЭлементами() Экспорт
	// Arrange
	ОжидаемоеЗначение = Новый Массив;
	ОжидаемоеЗначение.Добавить("элемент1");
	ОжидаемоеЗначение.Добавить("элемент2");
	
	ФактическоеЗначение = Новый Массив;
	ФактическоеЗначение.Добавить("элемент1");
	ФактическоеЗначение.Добавить("элемент3");
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).Не_().Идентично(ОжидаемоеЗначение);
КонецПроцедуры

&Тест
Процедура ТестДолжен_Проверить_ИдентичностьВложенныхМассивов() Экспорт
	// Arrange
	ВложенныйМассив1 = Новый Массив;
	ВложенныйМассив1.Добавить("вложенный1");
	ВложенныйМассив1.Добавить("вложенный2");
	
	ВложенныйМассив2 = Новый Массив;
	ВложенныйМассив2.Добавить("вложенный1");
	ВложенныйМассив2.Добавить("вложенный2");
	
	ОжидаемоеЗначение = Новый Массив;
	ОжидаемоеЗначение.Добавить("элемент1");
	ОжидаемоеЗначение.Добавить(ВложенныйМассив1);
	
	ФактическоеЗначение = Новый Массив;
	ФактическоеЗначение.Добавить("элемент1");
	ФактическоеЗначение.Добавить(ВложенныйМассив2);
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).Идентично(ОжидаемоеЗначение);
КонецПроцедуры

&Тест
Процедура ТестДолжен_Проверить_БезУчетаПорядкаЗначений() Экспорт
	// Arrange
	ОжидаемоеЗначение = Новый Массив;
	ОжидаемоеЗначение.Добавить("элемент1");
	ОжидаемоеЗначение.Добавить("элемент2");
	ОжидаемоеЗначение.Добавить("элемент3");
	
	ФактическоеЗначение = Новый Массив;
	ФактическоеЗначение.Добавить("элемент3");
	ФактическоеЗначение.Добавить("элемент1");
	ФактическоеЗначение.Добавить("элемент2");
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).НеУчитыватьПорядокВМассиве().Идентично(ОжидаемоеЗначение);
КонецПроцедуры

// Тесты для структур

&Тест
Процедура ТестДолжен_Проверить_ИдентичностьПустыхСтруктур() Экспорт
	// Arrange
	ОжидаемоеЗначение = Новый Структура;
	ФактическоеЗначение = Новый Структура;
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).Идентично(ОжидаемоеЗначение);
КонецПроцедуры

&Тест
Процедура ТестДолжен_Проверить_ИдентичностьСтруктур() Экспорт
	// Arrange
	ОжидаемоеЗначение = Новый Структура;
	ОжидаемоеЗначение.Вставить("Ключ1", "Значение1");
	ОжидаемоеЗначение.Вставить("Ключ2", 123);
	ОжидаемоеЗначение.Вставить("Ключ3", Истина);
	
	ФактическоеЗначение = Новый Структура;
	ФактическоеЗначение.Вставить("Ключ1", "Значение1");
	ФактическоеЗначение.Вставить("Ключ2", 123);
	ФактическоеЗначение.Вставить("Ключ3", Истина);
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).Идентично(ОжидаемоеЗначение);
КонецПроцедуры

&Тест
Процедура ТестДолжен_Проверить_НеИдентичностьСтруктурСРазнымиКлючами() Экспорт
	// Arrange
	ОжидаемоеЗначение = Новый Структура;
	ОжидаемоеЗначение.Вставить("Ключ1", "Значение1");
	ОжидаемоеЗначение.Вставить("Ключ2", 123);
	
	ФактическоеЗначение = Новый Структура;
	ФактическоеЗначение.Вставить("Ключ1", "Значение1");
	ФактическоеЗначение.Вставить("Ключ3", 123);
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).Не_().Идентично(ОжидаемоеЗначение);
КонецПроцедуры

&Тест
Процедура ТестДолжен_Проверить_НеИдентичностьСтруктурСРазнымиЗначениями() Экспорт
	// Arrange
	ОжидаемоеЗначение = Новый Структура;
	ОжидаемоеЗначение.Вставить("Ключ1", "Значение1");
	ОжидаемоеЗначение.Вставить("Ключ2", 123);
	
	ФактическоеЗначение = Новый Структура;
	ФактическоеЗначение.Вставить("Ключ1", "Значение1");
	ФактическоеЗначение.Вставить("Ключ2", 456);
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).Не_().Идентично(ОжидаемоеЗначение);
КонецПроцедуры

&Тест
Процедура ТестДолжен_Проверить_ИдентичностьВложенныхСтруктур() Экспорт
	// Arrange
	ВложеннаяСтруктура1 = Новый Структура;
	ВложеннаяСтруктура1.Вставить("ВложенныйКлюч", "ВложенноеЗначение");
	
	ВложеннаяСтруктура2 = Новый Структура;
	ВложеннаяСтруктура2.Вставить("ВложенныйКлюч", "ВложенноеЗначение");
	
	ОжидаемоеЗначение = Новый Структура;
	ОжидаемоеЗначение.Вставить("Ключ1", "Значение1");
	ОжидаемоеЗначение.Вставить("Структура", ВложеннаяСтруктура1);
	
	ФактическоеЗначение = Новый Структура;
	ФактическоеЗначение.Вставить("Ключ1", "Значение1");
	ФактическоеЗначение.Вставить("Структура", ВложеннаяСтруктура2);
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).Идентично(ОжидаемоеЗначение);
КонецПроцедуры

// Тесты для соответствий

&Тест
Процедура ТестДолжен_Проверить_ИдентичностьПустыхСоответствий() Экспорт
	// Arrange
	ОжидаемоеЗначение = Новый Соответствие;
	ФактическоеЗначение = Новый Соответствие;
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).Идентично(ОжидаемоеЗначение);
КонецПроцедуры

&Тест
Процедура ТестДолжен_Проверить_ИдентичностьСоответствий() Экспорт
	// Arrange
	ОжидаемоеЗначение = Новый Соответствие;
	ОжидаемоеЗначение.Вставить("Ключ1", "Значение1");
	ОжидаемоеЗначение.Вставить("Ключ2", 123);
	
	ФактическоеЗначение = Новый Соответствие;
	ФактическоеЗначение.Вставить("Ключ1", "Значение1");
	ФактическоеЗначение.Вставить("Ключ2", 123);
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).Идентично(ОжидаемоеЗначение);
КонецПроцедуры

&Тест
Процедура ТестДолжен_Проверить_НеИдентичностьСоответствий() Экспорт
	// Arrange
	ОжидаемоеЗначение = Новый Соответствие;
	ОжидаемоеЗначение.Вставить("Ключ1", "Значение1");
	ОжидаемоеЗначение.Вставить("Ключ2", 123);
	
	ФактическоеЗначение = Новый Соответствие;
	ФактическоеЗначение.Вставить("Ключ1", "Значение1");
	ФактическоеЗначение.Вставить("Ключ2", 456);
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).Не_().Идентично(ОжидаемоеЗначение);
КонецПроцедуры

// Тесты для таблиц значений

&Тест
Процедура ТестДолжен_Проверить_ИдентичностьПустыхТаблиц() Экспорт
	// Arrange
	ОжидаемоеЗначение = Новый ТаблицаЗначений;
	ФактическоеЗначение = Новый ТаблицаЗначений;
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).Идентично(ОжидаемоеЗначение);
КонецПроцедуры

&Тест
Процедура ТестДолжен_Проверить_ИдентичностьТаблиц() Экспорт
	// Arrange
	ОжидаемоеЗначение = Новый ТаблицаЗначений;
	ОжидаемоеЗначение.Колонки.Добавить("Колонка1", Новый ОписаниеТипов("Строка"));
	ОжидаемоеЗначение.Колонки.Добавить("Колонка2", Новый ОписаниеТипов("Число"));
	
	НоваяСтрока = ОжидаемоеЗначение.Добавить();
	НоваяСтрока.Колонка1 = "Значение1";
	НоваяСтрока.Колонка2 = 123;
	
	ФактическоеЗначение = Новый ТаблицаЗначений;
	ФактическоеЗначение.Колонки.Добавить("Колонка1", Новый ОписаниеТипов("Строка"));
	ФактическоеЗначение.Колонки.Добавить("Колонка2", Новый ОписаниеТипов("Число"));
	
	НоваяСтрока = ФактическоеЗначение.Добавить();
	НоваяСтрока.Колонка1 = "Значение1";
	НоваяСтрока.Колонка2 = 123;
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).Идентично(ОжидаемоеЗначение);
КонецПроцедуры

&Тест
Процедура ТестДолжен_Проверить_НеИдентичностьТаблиц() Экспорт
	// Arrange
	ОжидаемоеЗначение = Новый ТаблицаЗначений;
	ОжидаемоеЗначение.Колонки.Добавить("Колонка1", Новый ОписаниеТипов("Строка"));
	
	НоваяСтрока = ОжидаемоеЗначение.Добавить();
	НоваяСтрока.Колонка1 = "Значение1";
	
	ФактическоеЗначение = Новый ТаблицаЗначений;
	ФактическоеЗначение.Колонки.Добавить("Колонка1", Новый ОписаниеТипов("Строка"));
	
	НоваяСтрока = ФактическоеЗначение.Добавить();
	НоваяСтрока.Колонка1 = "Значение2";
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).Не_().Идентично(ОжидаемоеЗначение);
КонецПроцедуры

// Тесты с отрицанием

&Тест
Процедура ТестДолжен_Проверить_ОтрицаниеИдентичности() Экспорт
	// Arrange
	ОжидаемоеЗначение = "Привет, мир!";
	ФактическоеЗначение = "Привет, Вася!";
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).Не_().Идентично(ОжидаемоеЗначение);
	Ожидаем.Что(ФактическоеЗначение).ЭтоНе().Идентично(ОжидаемоеЗначение);
КонецПроцедуры

// Сложные тесты для комбинированных структур данных

&Тест
Процедура ТестДолжен_Проверить_ИдентичностьСложныхВложенныхСтруктур() Экспорт
	// Arrange
	ВложеннаяСтруктура1 = Новый Структура;
	ВложеннаяСтруктура1.Вставить("ИмяПользователя", "Иван");
	ВложеннаяСтруктура1.Вставить("Возраст", 25);
	ВложеннаяСтруктура1.Вставить("Активен", Истина);
	
	МассивПравИдентичности1 = Новый Массив;
	МассивПравИдентичности1.Добавить("Чтение");
	МассивПравИдентичности1.Добавить("Запись");
	МассивПравИдентичности1.Добавить("Удаление");
	
	ОжидаемоеЗначение = Новый Структура;
	ОжидаемоеЗначение.Вставить("Пользователь", ВложеннаяСтруктура1);
	ОжидаемоеЗначение.Вставить("Права", МассивПравИдентичности1);
	ОжидаемоеЗначение.Вставить("ДатаСоздания", '20250101000000');
	
	// Создаем идентичную структуру
	ВложеннаяСтруктура2 = Новый Структура;
	ВложеннаяСтруктура2.Вставить("ИмяПользователя", "Иван");
	ВложеннаяСтруктура2.Вставить("Возраст", 25);
	ВложеннаяСтруктура2.Вставить("Активен", Истина);
	
	МассивПравИдентичности2 = Новый Массив;
	МассивПравИдентичности2.Добавить("Чтение");
	МассивПравИдентичности2.Добавить("Запись");
	МассивПравИдентичности2.Добавить("Удаление");
	
	ФактическоеЗначение = Новый Структура;
	ФактическоеЗначение.Вставить("Пользователь", ВложеннаяСтруктура2);
	ФактическоеЗначение.Вставить("Права", МассивПравИдентичности2);
	ФактическоеЗначение.Вставить("ДатаСоздания", '20250101000000');
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).Идентично(ОжидаемоеЗначение);
КонецПроцедуры

&Тест
Процедура ТестДолжен_Проверить_НеИдентичностьСложныхВложенныхСтруктурСРазнымиЗначениями() Экспорт
	// Arrange
	ВложеннаяСтруктура1 = Новый Структура;
	ВложеннаяСтруктура1.Вставить("ИмяПользователя", "Иван");
	ВложеннаяСтруктура1.Вставить("Возраст", 25);
	
	МассивПрав1 = Новый Массив;
	МассивПрав1.Добавить("Чтение");
	МассивПрав1.Добавить("Запись");
	
	ОжидаемоеЗначение = Новый Структура;
	ОжидаемоеЗначение.Вставить("Пользователь", ВложеннаяСтруктура1);
	ОжидаемоеЗначение.Вставить("Права", МассивПрав1);
	
	// Создаем структуру с другими значениями во вложенном объекте
	ВложеннаяСтруктура2 = Новый Структура;
	ВложеннаяСтруктура2.Вставить("ИмяПользователя", "Петр"); // Отличается!
	ВложеннаяСтруктура2.Вставить("Возраст", 25);
	
	МассивПрав2 = Новый Массив;
	МассивПрав2.Добавить("Чтение");
	МассивПрав2.Добавить("Запись");
	
	ФактическоеЗначение = Новый Структура;
	ФактическоеЗначение.Вставить("Пользователь", ВложеннаяСтруктура2);
	ФактическоеЗначение.Вставить("Права", МассивПрав2);
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).Не_().Идентично(ОжидаемоеЗначение);
КонецПроцедуры

&Тест
Процедура ТестДолжен_Проверить_ИдентичностьМассивовСВложеннымиСтруктурами() Экспорт
	// Arrange
	Структура1 = Новый Структура;
	Структура1.Вставить("ID", 1);
	Структура1.Вставить("Название", "Первый элемент");
	
	Структура2 = Новый Структура;
	Структура2.Вставить("ID", 2);
	Структура2.Вставить("Название", "Второй элемент");
	
	ОжидаемоеЗначение = Новый Массив;
	ОжидаемоеЗначение.Добавить(Структура1);
	ОжидаемоеЗначение.Добавить(Структура2);
	
	// Создаем идентичные структуры
	Структура3 = Новый Структура;
	Структура3.Вставить("ID", 1);
	Структура3.Вставить("Название", "Первый элемент");
	
	Структура4 = Новый Структура;
	Структура4.Вставить("ID", 2);
	Структура4.Вставить("Название", "Второй элемент");
	
	ФактическоеЗначение = Новый Массив;
	ФактическоеЗначение.Добавить(Структура3);
	ФактическоеЗначение.Добавить(Структура4);
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).Идентично(ОжидаемоеЗначение);
КонецПроцедуры

&Тест
Процедура ТестДолжен_Проверить_ИдентичностьМассивовСВложеннымиСтруктурамиБезУчетаПорядка() Экспорт
	// Arrange
	Структура1 = Новый Структура;
	Структура1.Вставить("ID", 1);
	Структура1.Вставить("Название", "Первый элемент");
	
	Структура2 = Новый Структура;
	Структура2.Вставить("ID", 2);
	Структура2.Вставить("Название", "Второй элемент");
	
	ОжидаемоеЗначение = Новый Массив;
	ОжидаемоеЗначение.Добавить(Структура1);
	ОжидаемоеЗначение.Добавить(Структура2);
	
	// Создаем идентичные структуры в другом порядке
	Структура3 = Новый Структура;
	Структура3.Вставить("ID", 2);
	Структура3.Вставить("Название", "Второй элемент");
	
	Структура4 = Новый Структура;
	Структура4.Вставить("ID", 1);
	Структура4.Вставить("Название", "Первый элемент");
	
	ФактическоеЗначение = Новый Массив;
	ФактическоеЗначение.Добавить(Структура3); // Второй
	ФактическоеЗначение.Добавить(Структура4); // Первый
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).НеУчитыватьПорядокВМассиве().Идентично(ОжидаемоеЗначение);
КонецПроцедуры

&Тест
Процедура ТестДолжен_Проверить_ИдентичностьСоответствийСВложеннымиМассивами() Экспорт
	// Arrange
	Массив1 = Новый Массив;
	Массив1.Добавить("элемент1");
	Массив1.Добавить("элемент2");
	
	Массив2 = Новый Массив;
	Массив2.Добавить(100);
	Массив2.Добавить(200);
	
	ОжидаемоеЗначение = Новый Соответствие;
	ОжидаемоеЗначение.Вставить("Строки", Массив1);
	ОжидаемоеЗначение.Вставить("Числа", Массив2);
	
	// Создаем идентичные массивы
	Массив3 = Новый Массив;
	Массив3.Добавить("элемент1");
	Массив3.Добавить("элемент2");
	
	Массив4 = Новый Массив;
	Массив4.Добавить(100);
	Массив4.Добавить(200);
	
	ФактическоеЗначение = Новый Соответствие;
	ФактическоеЗначение.Вставить("Строки", Массив3);
	ФактическоеЗначение.Вставить("Числа", Массив4);
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).Идентично(ОжидаемоеЗначение);
КонецПроцедуры

&Тест
Процедура ТестДолжен_Проверить_ИдентичностьГлубокоВложенныхСтруктур() Экспорт
	// Arrange - создаем структуру с 3 уровнями вложенности
	УровеньТрети = Новый Структура;
	УровеньТрети.Вставить("ГлубокоеЗначение", "Самый внутренний");
	
	УровеньВторой = Новый Структура;
	УровеньВторой.Вставить("ВторойУровень", "Средний");
	УровеньВторой.Вставить("Вложенный", УровеньТрети);
	
	ОжидаемоеЗначение = Новый Структура;
	ОжидаемоеЗначение.Вставить("ПервыйУровень", "Внешний");
	ОжидаемоеЗначение.Вставить("Вложенный", УровеньВторой);
	
	// Создаем идентичную структуру
	УровеньТретиКопия = Новый Структура;
	УровеньТретиКопия.Вставить("ГлубокоеЗначение", "Самый внутренний");
	
	УровеньВторойКопия = Новый Структура;
	УровеньВторойКопия.Вставить("ВторойУровень", "Средний");
	УровеньВторойКопия.Вставить("Вложенный", УровеньТретиКопия);
	
	ФактическоеЗначение = Новый Структура;
	ФактическоеЗначение.Вставить("ПервыйУровень", "Внешний");
	ФактическоеЗначение.Вставить("Вложенный", УровеньВторойКопия);
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).Идентично(ОжидаемоеЗначение);
КонецПроцедуры

&Тест
Процедура ТестДолжен_Проверить_НеИдентичностьГлубокоВложенныхСтруктурСОтличиемВГлубине() Экспорт
	// Arrange - создаем структуру с 3 уровнями вложенности
	УровеньТрети1 = Новый Структура;
	УровеньТрети1.Вставить("ГлубокоеЗначение", "Самый внутренний");
	
	УровеньВторой1 = Новый Структура;
	УровеньВторой1.Вставить("ВторойУровень", "Средний");
	УровеньВторой1.Вставить("Вложенный", УровеньТрети1);
	
	ОжидаемоеЗначение = Новый Структура;
	ОжидаемоеЗначение.Вставить("ПервыйУровень", "Внешний");
	ОжидаемоеЗначение.Вставить("Вложенный", УровеньВторой1);
	
	// Создаем структуру с отличием на самом глубоком уровне
	УровеньТрети2 = Новый Структура;
	УровеньТрети2.Вставить("ГлубокоеЗначение", "Другое внутреннее значение"); // Отличается!
	
	УровеньВторой2 = Новый Структура;
	УровеньВторой2.Вставить("ВторойУровень", "Средний");
	УровеньВторой2.Вставить("Вложенный", УровеньТрети2);
	
	ФактическоеЗначение = Новый Структура;
	ФактическоеЗначение.Вставить("ПервыйУровень", "Внешний");
	ФактическоеЗначение.Вставить("Вложенный", УровеньВторой2);
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).Не_().Идентично(ОжидаемоеЗначение);
КонецПроцедуры

&Тест
Процедура ТестДолжен_Проверить_ИдентичностьСмешанныхТиповДанных() Экспорт
	// Arrange - создаем структуру со всеми типами данных
	МассивРазныхТипов = Новый Массив;
	МассивРазныхТипов.Добавить("Строка");
	МассивРазныхТипов.Добавить(42);
	МассивРазныхТипов.Добавить(Истина);
	МассивРазныхТипов.Добавить('20250101000000');
	МассивРазныхТипов.Добавить(Неопределено);
	
	ВложеннаяСтруктура = Новый Структура;
	ВложеннаяСтруктура.Вставить("Ключ", "Значение");
	
	ВложенноеСоответствие = Новый Соответствие;
	ВложенноеСоответствие.Вставить("СоответствиеКлюч", "СоответствиеЗначение");
	
	ОжидаемоеЗначение = Новый Структура;
	ОжидаемоеЗначение.Вставить("Массив", МассивРазныхТипов);
	ОжидаемоеЗначение.Вставить("Структура", ВложеннаяСтруктура);
	ОжидаемоеЗначение.Вставить("Соответствие", ВложенноеСоответствие);
	ОжидаемоеЗначение.Вставить("Строка", "Простая строка");
	ОжидаемоеЗначение.Вставить("Число", 3.14);
	ОжидаемоеЗначение.Вставить("Булево", Ложь);
	
	// Создаем идентичную структуру
	МассивРазныхТиповКопия = Новый Массив;
	МассивРазныхТиповКопия.Добавить("Строка");
	МассивРазныхТиповКопия.Добавить(42);
	МассивРазныхТиповКопия.Добавить(Истина);
	МассивРазныхТиповКопия.Добавить('20250101000000');
	МассивРазныхТиповКопия.Добавить(Неопределено);
	
	ВложеннаяСтруктураКопия = Новый Структура;
	ВложеннаяСтруктураКопия.Вставить("Ключ", "Значение");
	
	ВложенноеСоответствиеКопия = Новый Соответствие;
	ВложенноеСоответствиеКопия.Вставить("СоответствиеКлюч", "СоответствиеЗначение");
	
	ФактическоеЗначение = Новый Структура;
	ФактическоеЗначение.Вставить("Массив", МассивРазныхТиповКопия);
	ФактическоеЗначение.Вставить("Структура", ВложеннаяСтруктураКопия);
	ФактическоеЗначение.Вставить("Соответствие", ВложенноеСоответствиеКопия);
	ФактическоеЗначение.Вставить("Строка", "Простая строка");
	ФактическоеЗначение.Вставить("Число", 3.14);
	ФактическоеЗначение.Вставить("Булево", Ложь);
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).Идентично(ОжидаемоеЗначение);
КонецПроцедуры

&Тест
Процедура ТестДолжен_Проверить_ИдентичностьМассивовСНулевымиЗначениями() Экспорт
	// Arrange
	ОжидаемоеЗначение = Новый Массив;
	ОжидаемоеЗначение.Добавить(Неопределено);
	ОжидаемоеЗначение.Добавить(Null);
	ОжидаемоеЗначение.Добавить("");
	ОжидаемоеЗначение.Добавить(0);
	ОжидаемоеЗначение.Добавить(Ложь);
	
	ФактическоеЗначение = Новый Массив;
	ФактическоеЗначение.Добавить(Неопределено);
	ФактическоеЗначение.Добавить(Null);
	ФактическоеЗначение.Добавить("");
	ФактическоеЗначение.Добавить(0);
	ФактическоеЗначение.Добавить(Ложь);
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).Идентично(ОжидаемоеЗначение);
КонецПроцедуры

&Тест
Процедура ТестДолжен_Проверить_НеИдентичностьПриОтличииВНулевыхЗначениях() Экспорт
	// Arrange
	ОжидаемоеЗначение = Новый Массив;
	ОжидаемоеЗначение.Добавить(Неопределено);
	ОжидаемоеЗначение.Добавить("");
	ОжидаемоеЗначение.Добавить(0);
	
	ФактическоеЗначение = Новый Массив;
	ФактическоеЗначение.Добавить(Null); // Отличается от Неопределено!
	ФактическоеЗначение.Добавить("");
	ФактическоеЗначение.Добавить(0);
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).Не_().Идентично(ОжидаемоеЗначение);
КонецПроцедуры

&Тест
Процедура ТестДолжен_Проверить_ИдентичностьОченьГлубокойВложенности() Экспорт
	// Arrange - создаем структуру с глубокой вложенностью (10 уровней)
	ОжидаемоеЗначение = Новый Структура;
	ФактическоеЗначение = Новый Структура;
	
	ТекущаяСтруктураОжидаемая = ОжидаемоеЗначение;
	ТекущаяСтруктураФактическая = ФактическоеЗначение;
	
	Для Уровень = 1 По 10 Цикл
		СледующаяСтруктураОжидаемая = Новый Структура;
		СледующаяСтруктураФактическая = Новый Структура;
		
		СледующаяСтруктураОжидаемая.Вставить("Уровень", Уровень);
		СледующаяСтруктураОжидаемая.Вставить("Данные", "Уровень" + Формат(Уровень, "ЧГ=0"));
		
		СледующаяСтруктураФактическая.Вставить("Уровень", Уровень);
		СледующаяСтруктураФактическая.Вставить("Данные", "Уровень" + Формат(Уровень, "ЧГ=0"));
		
		ТекущаяСтруктураОжидаемая.Вставить("Следующий", СледующаяСтруктураОжидаемая);
		ТекущаяСтруктураФактическая.Вставить("Следующий", СледующаяСтруктураФактическая);
		
		ТекущаяСтруктураОжидаемая = СледующаяСтруктураОжидаемая;
		ТекущаяСтруктураФактическая = СледующаяСтруктураФактическая;
	КонецЦикла;
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).Идентично(ОжидаемоеЗначение);
КонецПроцедуры

&Тест
Процедура ТестДолжен_Проверить_ИдентичностьМассиваВМассиве() Экспорт
	// Arrange - массивы, содержащие другие массивы в разных позициях
	ВложенныйМассив1 = Новый Массив;
	ВложенныйМассив1.Добавить("a");
	ВложенныйМассив1.Добавить("b");
	
	ВложенныйМассив2 = Новый Массив;
	ВложенныйМассив2.Добавить(1);
	ВложенныйМассив2.Добавить(2);
	
	ОжидаемоеЗначение = Новый Массив;
	ОжидаемоеЗначение.Добавить("начало");
	ОжидаемоеЗначение.Добавить(ВложенныйМассив1);
	ОжидаемоеЗначение.Добавить("середина");
	ОжидаемоеЗначение.Добавить(ВложенныйМассив2);
	ОжидаемоеЗначение.Добавить("конец");
	
	// Создаем идентичную копию
	ВложенныйМассив1Копия = Новый Массив;
	ВложенныйМассив1Копия.Добавить("a");
	ВложенныйМассив1Копия.Добавить("b");
	
	ВложенныйМассив2Копия = Новый Массив;
	ВложенныйМассив2Копия.Добавить(1);
	ВложенныйМассив2Копия.Добавить(2);
	
	ФактическоеЗначение = Новый Массив;
	ФактическоеЗначение.Добавить("начало");
	ФактическоеЗначение.Добавить(ВложенныйМассив1Копия);
	ФактическоеЗначение.Добавить("середина");
	ФактическоеЗначение.Добавить(ВложенныйМассив2Копия);
	ФактическоеЗначение.Добавить("конец");
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).Идентично(ОжидаемоеЗначение);
КонецПроцедуры

&Тест
Процедура ТестДолжен_Проверить_НеИдентичностьМассивовСРазнымиВложенными() Экспорт
	// Arrange
	ВложенныйМассив1 = Новый Массив;
	ВложенныйМассив1.Добавить("a");
	ВложенныйМассив1.Добавить("b");
	
	ВложенныйМассив2 = Новый Массив;
	ВложенныйМассив2.Добавить("a");
	ВложенныйМассив2.Добавить("c"); // Отличается!
	
	ОжидаемоеЗначение = Новый Массив;
	ОжидаемоеЗначение.Добавить("элемент");
	ОжидаемоеЗначение.Добавить(ВложенныйМассив1);
	
	ФактическоеЗначение = Новый Массив;
	ФактическоеЗначение.Добавить("элемент");
	ФактическоеЗначение.Добавить(ВложенныйМассив2);
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).Не_().Идентично(ОжидаемоеЗначение);
КонецПроцедуры

&Тест
Процедура ТестДолжен_Проверить_ИдентичностьСложнойИерархии() Экспорт
	// Arrange - создаем сложную иерархию с массивами, структурами и соответствиями
	
	// Подчиненные элементы
	Подчиненный1 = Новый Структура;
	Подчиненный1.Вставить("ID", 1);
	Подчиненный1.Вставить("Название", "Подчиненный 1");
	Подчиненный1.Вставить("Активен", Истина);
	
	Подчиненный2 = Новый Структура;
	Подчиненный2.Вставить("ID", 2);
	Подчиненный2.Вставить("Название", "Подчиненный 2");
	Подчиненный2.Вставить("Активен", Ложь);
	
	МассивПодчиненных = Новый Массив;
	МассивПодчиненных.Добавить(Подчиненный1);
	МассивПодчиненных.Добавить(Подчиненный2);
	
	// Основные данные
	Основные = Новый Структура;
	Основные.Вставить("Подчиненные", МассивПодчиненных);
	Основные.Вставить("Количество", МассивПодчиненных.Количество());
	
	// Метаданные
	Метаданные = Новый Соответствие;
	Метаданные.Вставить("ВерсияСхемы", "1.0.0");
	Метаданные.Вставить("ДатаСоздания", '20250109120000');
	Метаданные.Вставить("Автор", "Система");
	
	ОжидаемоеЗначение = Новый Структура;
	ОжидаемоеЗначение.Вставить("Основные", Основные);
	ОжидаемоеЗначение.Вставить("Метаданные", Метаданные);
	ОжидаемоеЗначение.Вставить("СтатусКод", 200);
	
	// Создаем идентичную копию
	Подчиненный1Копия = Новый Структура;
	Подчиненный1Копия.Вставить("ID", 1);
	Подчиненный1Копия.Вставить("Название", "Подчиненный 1");
	Подчиненный1Копия.Вставить("Активен", Истина);
	
	Подчиненный2Копия = Новый Структура;
	Подчиненный2Копия.Вставить("ID", 2);
	Подчиненный2Копия.Вставить("Название", "Подчиненный 2");
	Подчиненный2Копия.Вставить("Активен", Ложь);
	
	МассивПодчиненныхКопия = Новый Массив;
	МассивПодчиненныхКопия.Добавить(Подчиненный1Копия);
	МассивПодчиненныхКопия.Добавить(Подчиненный2Копия);
	
	ОсновныеКопия = Новый Структура;
	ОсновныеКопия.Вставить("Подчиненные", МассивПодчиненныхКопия);
	ОсновныеКопия.Вставить("Количество", МассивПодчиненныхКопия.Количество());
	
	МетаданныеКопия = Новый Соответствие;
	МетаданныеКопия.Вставить("ВерсияСхемы", "1.0.0");
	МетаданныеКопия.Вставить("ДатаСоздания", '20250109120000');
	МетаданныеКопия.Вставить("Автор", "Система");
	
	ФактическоеЗначение = Новый Структура;
	ФактическоеЗначение.Вставить("Основные", ОсновныеКопия);
	ФактическоеЗначение.Вставить("Метаданные", МетаданныеКопия);
	ФактическоеЗначение.Вставить("СтатусКод", 200);
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).Идентично(ОжидаемоеЗначение);
КонецПроцедуры

&Тест
Процедура ТестДолжен_Проверить_НеИдентичностьПриОтличииВГлубине() Экспорт
	// Arrange - структуры идентичны, кроме одного значения глубоко внутри
	ВложеннаяСтруктура1 = Новый Структура;
	ВложеннаяСтруктура1.Вставить("Уровень3", "Значение1");
	
	ВложеннаяСтруктура2 = Новый Структура;
	ВложеннаяСтруктура2.Вставить("Уровень3", "Значение2"); // Отличается!
	
	СтруктураУровень2_1 = Новый Структура;
	СтруктураУровень2_1.Вставить("Вложенная", ВложеннаяСтруктура1);
	
	СтруктураУровень2_2 = Новый Структура;
	СтруктураУровень2_2.Вставить("Вложенная", ВложеннаяСтруктура2);
	
	ОжидаемоеЗначение = Новый Структура;
	ОжидаемоеЗначение.Вставить("Уровень1", "Одинаково");
	ОжидаемоеЗначение.Вставить("Уровень2", СтруктураУровень2_1);
	
	ФактическоеЗначение = Новый Структура;
	ФактическоеЗначение.Вставить("Уровень1", "Одинаково");
	ФактическоеЗначение.Вставить("Уровень2", СтруктураУровень2_2);
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).Не_().Идентично(ОжидаемоеЗначение);
КонецПроцедуры

&Тест
Процедура ТестДолжен_Проверить_ИдентичностьМассивовСРазнымПорядкомВСоответствии() Экспорт
	// Arrange - тестируем сложный случай с порядком в соответствии
	Массив1 = Новый Массив;
	Массив1.Добавить("элемент1");
	Массив1.Добавить("элемент2");
	Массив1.Добавить("элемент3");
	
	Массив2 = Новый Массив;
	Массив2.Добавить("элемент3"); // Другой порядок
	Массив2.Добавить("элемент1");
	Массив2.Добавить("элемент2");
	
	ОжидаемоеЗначение = Новый Соответствие;
	ОжидаемоеЗначение.Вставить("Ключ1", Массив1);
	ОжидаемоеЗначение.Вставить("Ключ2", "Простое значение");
	
	ФактическоеЗначение = Новый Соответствие;
	ФактическоеЗначение.Вставить("Ключ1", Массив2);
	ФактическоеЗначение.Вставить("Ключ2", "Простое значение");
	
	// Act & Assert - с учетом порядка должны быть НЕ идентичны
	Ожидаем.Что(ФактическоеЗначение).Не_().Идентично(ОжидаемоеЗначение);
	
	// А без учета порядка - идентичны
	Ожидаем.Что(ФактическоеЗначение).НеУчитыватьПорядокВМассиве().Идентично(ОжидаемоеЗначение);
КонецПроцедуры

&Тест
Процедура ТестДолжен_Проверить_ИдентичностьБольшихОбъемовДанных() Экспорт
	// Arrange - создаем достаточно большие структуры данных
	КоличествоЭлементов = 100;
	
	ОжидаемоеЗначение = Новый Структура;
	ФактическоеЗначение = Новый Структура;
	
	// Массив с множеством элементов
	БольшойМассив1 = Новый Массив;
	БольшойМассив2 = Новый Массив;
	
	Для Индекс = 1 По КоличествоЭлементов Цикл
		ЭлементМассива = Новый Структура;
		ЭлементМассива.Вставить("Индекс", Индекс);
		ЭлементМассива.Вставить("Значение", "Элемент_" + Формат(Индекс, "ЧГ=0"));
		ЭлементМассива.Вставить("Активен", Индекс % 2 = 1);
		
		БольшойМассив1.Добавить(ЭлементМассива);
		
		// Создаем копию элемента
		ЭлементМассиваКопия = Новый Структура;
		ЭлементМассиваКопия.Вставить("Индекс", Индекс);
		ЭлементМассиваКопия.Вставить("Значение", "Элемент_" + Формат(Индекс, "ЧГ=0"));
		ЭлементМассиваКопия.Вставить("Активен", Индекс % 2 = 1);
		
		БольшойМассив2.Добавить(ЭлементМассиваКопия);
	КонецЦикла;
	
	ОжидаемоеЗначение.Вставить("БольшойМассив", БольшойМассив1);
	ОжидаемоеЗначение.Вставить("РазмерМассива", БольшойМассив1.Количество());
	
	ФактическоеЗначение.Вставить("БольшойМассив", БольшойМассив2);
	ФактическоеЗначение.Вставить("РазмерМассива", БольшойМассив2.Количество());
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).Идентично(ОжидаемоеЗначение);
КонецПроцедуры

&Тест
Процедура ТестДолжен_Проверить_НеИдентичностьПриОтличииВБольшихДанных() Экспорт
	// Arrange - создаем большие структуры с одним отличием
	КоличествоЭлементов = 50;
	
	ОжидаемоеЗначение = Новый Массив;
	ФактическоеЗначение = Новый Массив;
	
	Для Индекс = 1 По КоличествоЭлементов Цикл
		Если Индекс = КоличествоЭлементов / 2 Тогда
			// В середине делаем отличие
			ОжидаемоеЗначение.Добавить("Отличается1");
			ФактическоеЗначение.Добавить("Отличается2");
		Иначе
			ЗначениеЭлемента = "Элемент_" + Формат(Индекс, "ЧГ=0");
			ОжидаемоеЗначение.Добавить(ЗначениеЭлемента);
			ФактическоеЗначение.Добавить(ЗначениеЭлемента);
		КонецЕсли;
	КонецЦикла;
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).Не_().Идентично(ОжидаемоеЗначение);
КонецПроцедуры

&Тест
Процедура ТестДолжен_Проверить_ИдентичностьСпециальныхСимволов() Экспорт
	// Arrange - проверяем строки со специальными символами
	ОжидаемоеЗначение = Новый Структура;
	ОжидаемоеЗначение.Вставить("ПереносСтроки", "Строка1" + Символы.ПС + "Строка2");
	ОжидаемоеЗначение.Вставить("Табуляция", "Колонка1" + Символы.Таб + "Колонка2");
	ОжидаемоеЗначение.Вставить("Кавычки", "Текст ""в кавычках""");
	ОжидаемоеЗначение.Вставить("Слэш", "Путь\к\файлу");
	ОжидаемоеЗначение.Вставить("Unicode", "Тест с эмодзи: 😀🎉");
	
	ФактическоеЗначение = Новый Структура;
	ФактическоеЗначение.Вставить("ПереносСтроки", "Строка1" + Символы.ПС + "Строка2");
	ФактическоеЗначение.Вставить("Табуляция", "Колонка1" + Символы.Таб + "Колонка2");
	ФактическоеЗначение.Вставить("Кавычки", "Текст ""в кавычках""");
	ФактическоеЗначение.Вставить("Слэш", "Путь\к\файлу");
	ФактическоеЗначение.Вставить("Unicode", "Тест с эмодзи: 😀🎉");
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).Идентично(ОжидаемоеЗначение);
КонецПроцедуры

&Тест
Процедура ТестДолжен_Проверить_ИдентичностьЧисловыхТипов() Экспорт
	// Arrange - проверяем разные числовые типы
	ОжидаемоеЗначение = Новый Структура;
	ОжидаемоеЗначение.Вставить("Целое", 42);
	ОжидаемоеЗначение.Вставить("Дробное", 3.14159);
	ОжидаемоеЗначение.Вставить("Ноль", 0);
	ОжидаемоеЗначение.Вставить("Отрицательное", -123);
	ОжидаемоеЗначение.Вставить("БольшоеЧисло", 999999999999);
	ОжидаемоеЗначение.Вставить("МалоеДробное", 0.0001);
	
	ФактическоеЗначение = Новый Структура;
	ФактическоеЗначение.Вставить("Целое", 42);
	ФактическоеЗначение.Вставить("Дробное", 3.14159);
	ФактическоеЗначение.Вставить("Ноль", 0);
	ФактическоеЗначение.Вставить("Отрицательное", -123);
	ФактическоеЗначение.Вставить("БольшоеЧисло", 999999999999);
	ФактическоеЗначение.Вставить("МалоеДробное", 0.0001);
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).Идентично(ОжидаемоеЗначение);
КонецПроцедуры

&Тест
Процедура ТестДолжен_Проверить_НеИдентичностьПохожихЧисел() Экспорт
	// Arrange - числа, которые выглядят похоже, но не равны
	ОжидаемоеЗначение = Новый Массив;
	ОжидаемоеЗначение.Добавить(3.14159);
	ОжидаемоеЗначение.Добавить(1);
	ОжидаемоеЗначение.Добавить(0);
	
	ФактическоеЗначение = Новый Массив;
	ФактическоеЗначение.Добавить(3.14158); // Отличается в последней цифре
	ФактическоеЗначение.Добавить(1);
	ФактическоеЗначение.Добавить(0);
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).Не_().Идентично(ОжидаемоеЗначение);
КонецПроцедуры

&Тест
Процедура ТестДолжен_Проверить_ИдентичностьМногомерныхМассивов() Экспорт
	// Arrange - создаем "многомерный" массив (массив массивов)
	Строка1 = Новый Массив;
	Строка1.Добавить(1);
	Строка1.Добавить(2);
	Строка1.Добавить(3);
	
	Строка2 = Новый Массив;
	Строка2.Добавить(4);
	Строка2.Добавить(5);
	Строка2.Добавить(6);
	
	Строка3 = Новый Массив;
	Строка3.Добавить(7);
	Строка3.Добавить(8);
	Строка3.Добавить(9);
	
	ОжидаемоеЗначение = Новый Массив;
	ОжидаемоеЗначение.Добавить(Строка1);
	ОжидаемоеЗначение.Добавить(Строка2);
	ОжидаемоеЗначение.Добавить(Строка3);
	
	// Создаем идентичную копию
	Строка1Копия = Новый Массив;
	Строка1Копия.Добавить(1);
	Строка1Копия.Добавить(2);
	Строка1Копия.Добавить(3);
	
	Строка2Копия = Новый Массив;
	Строка2Копия.Добавить(4);
	Строка2Копия.Добавить(5);
	Строка2Копия.Добавить(6);
	
	Строка3Копия = Новый Массив;
	Строка3Копия.Добавить(7);
	Строка3Копия.Добавить(8);
	Строка3Копия.Добавить(9);
	
	ФактическоеЗначение = Новый Массив;
	ФактическоеЗначение.Добавить(Строка1Копия);
	ФактическоеЗначение.Добавить(Строка2Копия);
	ФактическоеЗначение.Добавить(Строка3Копия);
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).Идентично(ОжидаемоеЗначение);
КонецПроцедуры

&Тест
Процедура ТестДолжен_Проверить_НеИдентичностьМногомерныхМассивовСОшибкой() Экспорт
	// Arrange - многомерные массивы с ошибкой в одном элементе
	Строка1 = Новый Массив;
	Строка1.Добавить(1);
	Строка1.Добавить(2);
	Строка1.Добавить(3);
	
	Строка2 = Новый Массив;
	Строка2.Добавить(4);
	Строка2.Добавить(5);
	Строка2.Добавить(6);
	
	ОжидаемоеЗначение = Новый Массив;
	ОжидаемоеЗначение.Добавить(Строка1);
	ОжидаемоеЗначение.Добавить(Строка2);
	
	// Создаем копию с ошибкой
	Строка1СОшибкой = Новый Массив;
	Строка1СОшибкой.Добавить(1);
	Строка1СОшибкой.Добавить(999); // Ошибка!
	Строка1СОшибкой.Добавить(3);
	
	Строка2Копия = Новый Массив;
	Строка2Копия.Добавить(4);
	Строка2Копия.Добавить(5);
	Строка2Копия.Добавить(6);
	
	ФактическоеЗначение = Новый Массив;
	ФактическоеЗначение.Добавить(Строка1СОшибкой);
	ФактическоеЗначение.Добавить(Строка2Копия);
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).Не_().Идентично(ОжидаемоеЗначение);
КонецПроцедуры

&Тест
Процедура ТестДолжен_Проверить_ИдентичностьСоответствийСМассивамиКлючей() Экспорт
	// Arrange - соответствия с массивами в качестве ключей и значений
	МассивКлюч1 = Новый Массив;
	МассивКлюч1.Добавить("ключ");
	МассивКлюч1.Добавить(1);
	
	МассивЗначение1 = Новый Массив;
	МассивЗначение1.Добавить("значение");
	МассивЗначение1.Добавить(2);
	
	ОжидаемоеЗначение = Новый Соответствие;
	ОжидаемоеЗначение.Вставить("ПростойКлюч", МассивЗначение1);
	ОжидаемоеЗначение.Вставить("ДругойКлюч", "Простое значение");
	
	// Создаем идентичную копию
	МассивЗначение1Копия = Новый Массив;
	МассивЗначение1Копия.Добавить("значение");
	МассивЗначение1Копия.Добавить(2);
	
	ФактическоеЗначение = Новый Соответствие;
	ФактическоеЗначение.Вставить("ПростойКлюч", МассивЗначение1Копия);
	ФактическоеЗначение.Вставить("ДругойКлюч", "Простое значение");
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).Идентично(ОжидаемоеЗначение);
КонецПроцедуры

&Тест
Процедура ТестДолжен_Проверить_ИдентичностьКомбинированныхКоллекций() Экспорт
	// Arrange - структура, содержащая массив соответствий
	Соответствие1 = Новый Соответствие;
	Соответствие1.Вставить("ID", 1);
	Соответствие1.Вставить("Название", "Первый элемент");
	
	Соответствие2 = Новый Соответствие;
	Соответствие2.Вставить("ID", 2);
	Соответствие2.Вставить("Название", "Второй элемент");
	
	МассивСоответствий = Новый Массив;
	МассивСоответствий.Добавить(Соответствие1);
	МассивСоответствий.Добавить(Соответствие2);
	
	ВложеннаяСтруктура = Новый Структура;
	ВложеннаяСтруктура.Вставить("Элементы", МассивСоответствий);
	ВложеннаяСтруктура.Вставить("Счетчик", МассивСоответствий.Количество());
	
	ОжидаемоеЗначение = Новый Соответствие;
	ОжидаемоеЗначение.Вставить("Данные", ВложеннаяСтруктура);
	ОжидаемоеЗначение.Вставить("Статус", "Готов");
	
	// Создаем идентичную копию
	Соответствие1Копия = Новый Соответствие;
	Соответствие1Копия.Вставить("ID", 1);
	Соответствие1Копия.Вставить("Название", "Первый элемент");
	
	Соответствие2Копия = Новый Соответствие;
	Соответствие2Копия.Вставить("ID", 2);
	Соответствие2Копия.Вставить("Название", "Второй элемент");
	
	МассивСоответствийКопия = Новый Массив;
	МассивСоответствийКопия.Добавить(Соответствие1Копия);
	МассивСоответствийКопия.Добавить(Соответствие2Копия);
	
	ВложеннаяСтруктураКопия = Новый Структура;
	ВложеннаяСтруктураКопия.Вставить("Элементы", МассивСоответствийКопия);
	ВложеннаяСтруктураКопия.Вставить("Счетчик", МассивСоответствийКопия.Количество());
	
	ФактическоеЗначение = Новый Соответствие;
	ФактическоеЗначение.Вставить("Данные", ВложеннаяСтруктураКопия);
	ФактическоеЗначение.Вставить("Статус", "Готов");
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).Идентично(ОжидаемоеЗначение);
КонецПроцедуры

&Тест
Процедура ТестДолжен_Проверить_ПустыхВложенныхКоллекций() Экспорт
	// Arrange - структуры с пустыми вложенными коллекциями
	ПустойМассив = Новый Массив;
	ПустаяСтруктура = Новый Структура;
	ПустоеСоответствие = Новый Соответствие;
	
	ОжидаемоеЗначение = Новый Структура;
	ОжидаемоеЗначение.Вставить("ПустойМассив", ПустойМассив);
	ОжидаемоеЗначение.Вставить("ПустаяСтруктура", ПустаяСтруктура);
	ОжидаемоеЗначение.Вставить("ПустоеСоответствие", ПустоеСоответствие);
	
	// Создаем копии пустых коллекций
	ПустойМассивКопия = Новый Массив;
	ПустаяСтруктураКопия = Новый Структура;
	ПустоеСоответствиеКопия = Новый Соответствие;
	
	ФактическоеЗначение = Новый Структура;
	ФактическоеЗначение.Вставить("ПустойМассив", ПустойМассивКопия);
	ФактическоеЗначение.Вставить("ПустаяСтруктура", ПустаяСтруктураКопия);
	ФактическоеЗначение.Вставить("ПустоеСоответствие", ПустоеСоответствиеКопия);
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).Идентично(ОжидаемоеЗначение);
КонецПроцедуры

&Тест
Процедура ТестДолжен_Проверить_НеИдентичностьПустойИНепустойКоллекции() Экспорт
	// Arrange - сравниваем пустую и непустую коллекции
	ПустойМассив = Новый Массив;
	НепустойМассив = Новый Массив;
	НепустойМассив.Добавить("элемент");
	
	ОжидаемоеЗначение = Новый Структура;
	ОжидаемоеЗначение.Вставить("Массив", ПустойМассив);
	
	ФактическоеЗначение = Новый Структура;
	ФактическоеЗначение.Вставить("Массив", НепустойМассив);
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).Не_().Идентично(ОжидаемоеЗначение);
КонецПроцедуры

&Тест
Процедура ТестДолжен_Проверить_ИдентичностьСпециальныхДат() Экспорт
	// Arrange - тестируем различные форматы дат
	ОжидаемоеЗначение = Новый Структура;
	ОжидаемоеЗначение.Вставить("ПустаяДата", '00010101000000');
	ОжидаемоеЗначение.Вставить("НовыйГод", '20250101000000');
	ОжидаемоеЗначение.Вставить("СВременем", '20250109142530');
	ОжидаемоеЗначение.Вставить("ПолночьТочно", '20250109000000');
	
	ФактическоеЗначение = Новый Структура;
	ФактическоеЗначение.Вставить("ПустаяДата", '00010101000000');
	ФактическоеЗначение.Вставить("НовыйГод", '20250101000000');
	ФактическоеЗначение.Вставить("СВременем", '20250109142530');
	ФактическоеЗначение.Вставить("ПолночьТочно", '20250109000000');
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).Идентично(ОжидаемоеЗначение);
КонецПроцедуры

&Тест
Процедура ТестДолжен_Проверить_НеИдентичностьДатСРазницейВСекунду() Экспорт
	// Arrange - даты, отличающиеся на секунду
	ОжидаемоеЗначение = '20250109142530'; // 14:25:30
	ФактическоеЗначение = '20250109142531'; // 14:25:31
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).Не_().Идентично(ОжидаемоеЗначение);
КонецПроцедуры

&Тест
Процедура ТестДолжен_Проверить_ИдентичностьБулевыхВМассивах() Экспорт
	// Arrange - массивы с различными булевыми значениями
	ОжидаемоеЗначение = Новый Массив;
	ОжидаемоеЗначение.Добавить(Истина);
	ОжидаемоеЗначение.Добавить(Ложь);
	ОжидаемоеЗначение.Добавить(Истина);
	ОжидаемоеЗначение.Добавить(Ложь);
	
	ФактическоеЗначение = Новый Массив;
	ФактическоеЗначение.Добавить(Истина);
	ФактическоеЗначение.Добавить(Ложь);
	ФактическоеЗначение.Добавить(Истина);
	ФактическоеЗначение.Добавить(Ложь);
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).Идентично(ОжидаемоеЗначение);
КонецПроцедуры

&Тест
Процедура ТестДолжен_Проверить_НеИдентичностьБулевыхВМассивах() Экспорт
	// Arrange - массивы с отличающимися булевыми значениями
	ОжидаемоеЗначение = Новый Массив;
	ОжидаемоеЗначение.Добавить(Истина);
	ОжидаемоеЗначение.Добавить(Ложь);
	ОжидаемоеЗначение.Добавить(Истина);
	
	ФактическоеЗначение = Новый Массив;
	ФактическоеЗначение.Добавить(Истина);
	ФактическоеЗначение.Добавить(Истина); // Отличается!
	ФактическоеЗначение.Добавить(Истина);
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).Не_().Идентично(ОжидаемоеЗначение);
КонецПроцедуры

&Тест
Процедура ТестДолжен_Проверить_ИдентичностьСтрокСПробелами() Экспорт
	// Arrange - строки с различными пробельными символами
	ОжидаемоеЗначение = Новый Структура;
	ОжидаемоеЗначение.Вставить("СПробелами", "  Строка с пробелами  ");
	ОжидаемоеЗначение.Вставить("БезПробелов", "СтрокаБезПробелов");
	ОжидаемоеЗначение.Вставить("ТолькоПробелы", "   ");
	ОжидаемоеЗначение.Вставить("ПустаяСтрока", "");
	
	ФактическоеЗначение = Новый Структура;
	ФактическоеЗначение.Вставить("СПробелами", "  Строка с пробелами  ");
	ФактическоеЗначение.Вставить("БезПробелов", "СтрокаБезПробелов");
	ФактическоеЗначение.Вставить("ТолькоПробелы", "   ");
	ФактическоеЗначение.Вставить("ПустаяСтрока", "");
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).Идентично(ОжидаемоеЗначение);
КонецПроцедуры

&Тест
Процедура ТестДолжен_Проверить_НеИдентичностьСтрокСРазнымиПробелами() Экспорт
	// Arrange - строки с разным количеством пробелов
	ОжидаемоеЗначение = "  два пробела  ";
	ФактическоеЗначение = " один пробел ";
	
	// Act & Assert
	Ожидаем.Что(ФактическоеЗначение).Не_().Идентично(ОжидаемоеЗначение);
КонецПроцедуры
